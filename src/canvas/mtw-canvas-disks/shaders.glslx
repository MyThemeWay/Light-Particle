/*! MTW-CANVAS-DISKS: SHADERS.GLSLX
 * 
 * Author: sitdisch
 * Source: https://sitdisch.github.io/#mythemeway
 * License: MIT
 * Copyright © 2021 sitdisch
 *
 * FRAGMENT SHADER IS BASED ON:
 * 
 * Shadertoy: CoordSys - intersection
 * 
 * Original Author: Inigo Quilez
 * Source: https://www.shadertoy.com/view/lsfGDB
 * License: MIT
 * Copyright © 2013 Inigo Quilez
 */

// 
// SECTION: FRAGMENT SHADER
//

uniform float iTime;
uniform vec3 iResolution;

vec3 intersectCoordSys(vec3 ro, vec3 rd, vec3 dc, vec3 du, vec3 dv)
{
	vec3 oc = ro - dc;
	return vec3(
		dot(cross(du, dv), oc),
		dot(cross(oc, du), rd),
		dot(cross(dv, oc), rd)) /
		dot(cross(dv, du), rd);
}

vec3 hash3(float n)
{
	return fract(sin(vec3(n, n + 1.0, n + 2.0)) * vec3(43758.5453123, 12578.1459123, 19642.3490423));
}

vec3 shade(vec4 res)
{
	float ra = length(res.yz);

	float an = atan(res.y, res.z) + 0.6 * iTime;

	float pa = sin(5.0 * an);

	vec3 cola = 0.5 + 0.5 * sin((res.w / 32.0) * 3.5 + vec3(0.0, 1.0, 2.0));

	vec3 col = vec3(0.0);
	col += cola * 1.0 * (1.0 - smoothstep(0.00, 0.03, abs(ra - 0.8))) * (0.5 + 0.5 * pa);
	col += cola * 0.7 * (1.0 - smoothstep(0.00, 0.20, abs(ra - 0.8))) * (0.5 + 0.5 * pa);
	col += cola * 0.5 * (1.0 - smoothstep(0.05, 0.10, abs(ra - 0.5))) * (0.5 + 0.5 * pa);

	return col * 0.3;
}

vec3 render(vec3 ro, vec3 rd)
{
	// raytrace
	vec3 col = vec3(0.0);

	for (float i = 0.; i < 25.; i++)
	{
		// position disk
		vec3 r = 1.5 * (-1.0 + 2.0 * hash3(i * 3.1415 / 1.5));
		if ( i == 1. ) { r += 1.4; }

		// orientate disk
		vec3 u = normalize(r.zxy);
		vec3 v = normalize(cross(u, vec3(0.0, 1.0, 0.0)));

		// intersect coord sys
		vec3 tmp = intersectCoordSys(ro, rd, r, u, v);

		if (dot(tmp.yz, tmp.yz) < 1.0 && tmp.x > 0.0)
		{
			// shade
			col += shade(vec4(tmp, i * 3.1415));
		}
	}

	return col;
}

void mainImage(out vec4 fragColor, vec2 fragCoord)
{
	vec2 p = (2.0 * fragCoord - iResolution.xy) / iResolution.y;

	// camera
	vec3 ro = 1.5 * vec3(cos(0.05 * iTime), 0.0, sin(0.05 * iTime));
	vec3 ta = vec3(0.0, 0.0, 0.0);
	// camera matrix
	vec3 ww = normalize(ta - ro);
	vec3 uu = normalize(cross(ww, vec3(0.0, 1.0, 0.0)));
	vec3 vv = normalize(cross(uu, ww));
	// create view ray
	vec3 rd = normalize(p.x * uu + p.y * vv + 1.0 * ww);

	vec3 col = render(ro, rd);

	fragColor = vec4(col, 1.0);
}

export void fragmentShader() {
	mainImage(gl_FragColor, gl_FragCoord.xy);
}

// 
// SECTION: VERTEX SHADER
//

attribute vec3 position;

export void vertexShader() {
	gl_Position = vec4( position, 1.0 ); 
}
